version: 2.1
description: |
      Seamlessly integrate Lambda Tunnel with CircleCI pipelines and 
      run Selenium tests on 2000+ browsers for your locally hosted or 
      privately hosted pages with LambdaTest Selenium Grid.
display:
  home_url: https://www.lambdatest.com/
  source_url: https://github.com/LambdaTest/Lambdatest-circleci-orb

commands:
  install:
    description: |
      Install and setup tunnel binary
    steps:
      - run: 
          name: "Download and Extract tunnel binary"
          command: |
            sudo apt-get update && sudo apt-get install -y curl unzip iproute2 psmisc
            curl -O https://downloads.lambdatest.com/tunnel/linux/64bit/ltcomponent.zip
            unzip ltcomponent.zip
            mv ltcomponent LT
            chmod +x LT
            rm ltcomponent.zip

  open_tunnel:
    description: |
        Launches the tunnel binary in background
    parameters:
      lambdatest_email:
        description: Specify your LambdaTest email
        type: string
      lambdatest_key:
         description: Specify environment var holding LambdaTest Access Key
         type: env_var_name
         default: LAMBDATEST_KEY
      tunnel_name:
        description: Specify a tunnel name to uniquely identify your tunnel on LambdaTest platform
        type: string
        default: ""
      shared_tunnel:
        description: Sharing tunnel among team members
        type: boolean
        default: false
      proxy_host:
        description: You may specify a proxy host if connecting tunnel via proxy
        type: string
        default: ""
      proxy_port:
        description: You may specify a proxy port if connecting tunnel via proxy
        type: string
        default: ""
      proxy_user:
        description: You may specify a proxy username if connecting tunnel via proxy that has authentication enabled
        type: string
        default: ""
      proxy_pass:
        description: You may specify a proxy password if connecting tunnel via proxy that has authentication enabled
        type: string
        default: ""
    steps:
      - run: 
          name: "Executing the tunnel binary"
          background: true
          command: |
            if [ -z "$<<parameters.lambdatest_key>>" ]; then
              echo "Error: The parameter lambdatest_key is empty. Please ensure the environment variable LAMBDATEST_KEY has been added."
              exit 1
            fi
            read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
            PORT=$LOWERPORT
            while [  $PORT -lt $UPPERPORT ]; do
                ss -lpn | grep -q ":$PORT " || break
                let PORT=PORT+1 
            done
            echo "$PORT" > /tmp/port
            ./LT --user <<parameters.lambdatest_email>> --key ${<<parameters.lambdatest_key>>} --controller circleci --infoAPIPort $PORT \
            <<# parameters.tunnel_name >> --tunnelName <<parameters.tunnel_name>> \
            <</ parameters.tunnel_name>>
            <<# parameters.proxy_host >> --proxy-host <<parameters.proxy_host>> \
            <</ parameters.proxy_host>>
            <<# parameters.proxy_port >> --proxy-port <<parameters.proxy_port>> \
            <</ parameters.proxy_port>>
            <<# parameters.proxy_user >> --proxy-user <<parameters.proxy_user>> \
            <</ parameters.proxy_user>>
            <<# parameters.proxy_pass >> --proxy-pass <<parameters.proxy_pass>> \
            <</ parameters.proxy_pass>>
            <<# parameters.shared_tunnel >> --shared-tunnel \ <</ parameters.shared_tunnel>>
            /
  wait_tunnel:
    description: |
      Waits for the tunnel connection to be established with the tunnel server
    steps:
      - run:
          name: Wait for LambdaTest Tunnel
          command: |
            while [ ! -f /tmp/port ]; do sleep 0.5; done
            PORT=$(head -1 /tmp/port)
            curl  --silent --retry-connrefused --connect-timeout 5 --max-time 5 --retry 30 --retry-delay 2 --retry-max-time 60 http://127.0.0.1:$PORT/api/v1.0/info 2>&1 > /dev/null

  close_tunnel:
    description: |
      Quitting the tunnel after test suite has been run
    steps:
      - run:
          name: Close LambdaTest Tunnel
          command: |
            PORT=$(head -1 /tmp/port)
            status_code=$(curl --request DELETE --write-out %{http_code} --silent --output /dev/null http://127.0.0.1:$PORT/api/v1.0/stop)
            if [[ "$status_code" -ne 200 ]] ; then
              killall LT
            fi
            rm /tmp/port
jobs:
  with_tunnel:
    description: Job to run LambdaTest tunnel for testing locally or privately hosted web apps
    parameters:
      docker:
        type: string
        default: "cimg/node:current"
      lambdatest_email:
        description: Specify your LambdaTest email
        type: string
      lambdatest_key:
         description: Specify environment var holding LambdaTest Access Key
         type: env_var_name
         default: LAMBDATEST_KEY
      tunnel_name:
        description: Specify a tunnel name to uniquely identify your tunnel on LambdaTest platform
        type: string
        default: ""
      shared_tunnel:
        description: Sharing tunnel among team members
        type: boolean
        default: false
      proxy_host:
        description: You may specify a proxy host if connecting tunnel via proxy
        type: string
        default: ""
      proxy_port:
        description: You may specify a proxy port if connecting tunnel via proxy
        type: string
        default: ""
      proxy_user:
        description: You may specify a proxy username if connecting tunnel via proxy that has authentication enabled
        type: string
        default: ""
      proxy_pass:
        description: You may specify a proxy password if connecting tunnel via proxy that has authentication enabled
        type: string
        default: ""
      steps:
        type: steps
        description: Steps to execute once the LambdaTest Tunnel is available
    docker: 
      - image: <<parameters.docker>>
    steps:
      - checkout
      - install
      - open_tunnel:
          lambdatest_email: <<parameters.lambdatest_email>>
          lambdatest_key: <<parameters.lambdatest_key>>
          tunnel_name: <<parameters.tunnel_name>>
          shared_tunnel: <<parameters.shared_tunnel>>
          proxy_host: <<parameters.proxy_host>>
          proxy_port: <<parameters.proxy_port>>
          proxy_user: <<parameters.proxy_user>>
          proxy_pass: <<parameters.proxy_pass>>
      - wait_tunnel
      - steps: << parameters.steps >>
      - close_tunnel

examples:
  sample_test:
    description: Open lambdatest tunnel and run sample nightwatchjs test
    usage:
      version: 2.1
      orbs:
        lambda-tunnel: lambdatest/lambda-tunnel@volatile
      workflows:
        browser_test:
          jobs:
            - lambdatest/with_tunnel:
                tunnel_name: "chrome"
                lambdatest_email: "user@lambdatest.com"
                steps:
                  - run: 
                      command: |
                        npm install
                        export LT_USERNAME=<<parameters.lambdatest_email>>
                        export LT_ACCESS_KEY=<<parameters.lambdatest_key>> 
                        node_modules/.bin/nightwatch -e chrome
    
  parallel_tests:
    description: Open lambdatest tunnel and run sample nightwatchjs test in parallel
    usage:
      version: 2.1
      orbs:
        lambda-tunnel: lambdatest/lambda-tunnel@volatile
      workflows:
        browser_tests:
          jobs:
            - lambdatest/with_tunnel:
                name: "Chrome test"
                tunnel_name: "chrome"
                lambdatest_email: "user@lambdatest.com"
                steps:
                  - run: 
                      command: |
                        npm install
                        export LT_USERNAME=<<parameters.lambdatest_email>>
                        export LT_ACCESS_KEY=$LAMBDATEST_KEY
                        node_modules/.bin/nightwatch -e chrome

            - lambdatest/with_tunnel:
                name: "Firefox test"
                tunnel_name: "firefox"
                lambdatest_email: "user@lambdatest.com"
                steps:
                  - run: 
                      command: |
                        npm install
                        export LT_USERNAME=<<parameters.lambdatest_email>>
                        export LT_ACCESS_KEY=$LAMBDATEST_KEY
                        node_modules/.bin/nightwatch -e firefox
